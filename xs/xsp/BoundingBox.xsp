%module{Slic3r::XS};

%{
#include <xsinit.h>
#include "libslic3r/BoundingBox.hpp"
#include "libslic3r/Point.hpp"
%}

%name{Slic3r::Geometry::BoundingBox} class BoundingBox {
    BoundingBox();
    ~BoundingBox();
    Clone<BoundingBox> clone()
        %code{% RETVAL = THIS; %};
    void merge(BoundingBox* bb) %code{% THIS->merge(*bb); %};
    void merge_point(Point* point) %code{% THIS->merge(*point); %};
    void scale(double factor);
    void translate(double x, double y);
    void offset(double delta);
    bool contains_point(Point* point) %code{% RETVAL = THIS->contains(*point); %};
    bool overlap(BoundingBox* bbox) %code{% RETVAL = THIS->overlap(*bbox); %};
    Clone<Polygon> polygon();
    Clone<Point> size();
    Clone<Point> center();
    bool empty() %code{% RETVAL = empty(*THIS); %};
    double radius();
    Clone<Point> min_point() %code{% RETVAL = THIS->min; %};
    Clone<Point> max_point() %code{% RETVAL = THIS->max; %};
    int x_min() %code{% RETVAL = THIS->min(0); %};
    int x_max() %code{% RETVAL = THIS->max(0); %};
    int y_min() %code{% RETVAL = THIS->min(1); %};
    int y_max() %code{% RETVAL = THIS->max(1); %};
    void set_x_min(double val) %code{% THIS->min(0) = val; %};
    void set_x_max(double val) %code{% THIS->max(0) = val; %};
    void set_y_min(double val) %code{% THIS->min(1) = val; %};
    void set_y_max(double val) %code{% THIS->max(1) = val; %};
    std::string serialize() %code{% char buf[2048]; sprintf(buf, "%ld,%ld;%ld,%ld", THIS->min(0), THIS->min(1), THIS->max(0), THIS->max(1)); RETVAL = buf; %};
    bool defined() %code{% RETVAL = THIS->defined; %};

%{

BoundingBox*
new_from_points(CLASS, points)
    char*   CLASS
    Points  points
    CODE:
        RETVAL = new BoundingBox(points);
    OUTPUT:
        RETVAL

%}
};

