configure_file(
  input : 'libslic3r_version.h.in',
  output: 'libslic3r_version.h',
  configuration: config,
)

libslicer_sources = [
  'pchheader.cpp',
  'BoundingBox.cpp',
  'BridgeDetector.cpp',
  'ClipperUtils.cpp',
  'Config.cpp',
  'EdgeGrid.cpp',
  'ExPolygon.cpp',
  'ExPolygonCollection.cpp',
  'Extruder.cpp',
  'ExtrusionEntity.cpp',
  'ExtrusionEntityCollection.cpp',
  'ExtrusionSimulator.cpp',
  'Fill/Fill.cpp',
  'Fill/Fill3DHoneycomb.cpp',
  'Fill/FillBase.cpp',
  'Fill/FillConcentric.cpp',
  'Fill/FillHoneycomb.cpp',
  'Fill/FillGyroid.cpp',
  'Fill/FillPlanePath.cpp',
  'Fill/FillRectilinear.cpp',
  'Fill/FillRectilinear2.cpp',
  'Fill/FillRectilinear3.cpp',
  'Flow.cpp',
  'Format/3mf.cpp',
  'Format/AMF.cpp',
  'Format/OBJ.cpp',
  'Format/objparser.cpp',
  'Format/PRUS.cpp',
  'Format/STL.cpp',
  'GCode/Analyzer.cpp',
  'GCode/CoolingBuffer.cpp',
  'GCode/PostProcessor.cpp',
  # 'GCode/PressureEqualizer.c',
  'GCode/PreviewData.cpp',
  'GCode/PrintExtents.cpp',
  'GCode/SpiralVase.cpp',
  'GCode/ToolOrdering.cpp',
  'GCode/WipeTowerPrusaMM.cpp',
  'GCode.cpp',
  'GCodeReader.cpp',
  # GCodeSender.cpp
  'GCodeTimeEstimator.cpp',
  'GCodeWriter.cpp',
  'Geometry.cpp',
  'Layer.cpp',
  'LayerRegion.cpp',
  'Line.cpp',
  'Model.cpp',
  'ModelArrange.cpp',
  'MotionPlanner.cpp',
  'MultiPoint.cpp',
  'PerimeterGenerator.cpp',
  'PlaceholderParser.cpp',
  'Point.cpp',
  'Polygon.cpp',
  'Polyline.cpp',
  'PolylineCollection.cpp',
  'Print.cpp',
  'PrintBase.cpp',
  'PrintConfig.cpp',
  'PrintObject.cpp',
  'PrintRegion.cpp',
  'Rasterizer/Rasterizer.cpp',
  'SLAPrint.cpp',
  'SLA/SLAAutoSupports.cpp',
  'Slicing.cpp',
  'SlicingAdaptive.cpp',
  'SupportMaterial.cpp',
  'Surface.cpp',
  'SurfaceCollection.cpp',
  'SVG.cpp',
  'Tesselate.cpp',
  'TriangleMesh.cpp',
  'utils.cpp',
  'Zipper.cpp',
  'SLA/SLABasePool.cpp',
  'SLA/SLASupportTree.cpp',
  'SLA/SLASupportTreeIGL.cpp',
  'SLA/SLARotfinder.cpp',
]

if get_option('pch') and not get_option('syntaxonly')
  # add_precompiled_header(libslic3r pchheader.hpp FORCEINCLUDE)
endif


shiny_on_profile = get_option('profile') ? shiny : []

libslicer = static_library('libslicer',
  libslicer_sources,

  link_with: [
    admesh,
    glu_libtess,
    # libnest2d,
    miniz,
    boost_nowide,
    poly2tri,
    polypartition,
    qhull,
    semver,
    shiny_on_profile
  ],
  dependencies: [
    boost,
    eigen,
    expat,
    tbb,
    psapi,

    clipper,
    libnest2d,
  ],
  include_directories: [
    glu_libtessInclude,
    polypartitionInclude,
    qhullInclude,
    srcInclude,
  ],
  c_args: '-DUSE_TBB',
)
